// Code generated by MockGen. DO NOT EDIT.
// Source: scorer.go

// Package mock_scoring is a generated GoMock package.
package mock_scoring

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockRepositoryMetrics is a mock of RepositoryMetrics interface.
type MockRepositoryMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMetricsMockRecorder
}

// MockRepositoryMetricsMockRecorder is the mock recorder for MockRepositoryMetrics.
type MockRepositoryMetricsMockRecorder struct {
	mock *MockRepositoryMetrics
}

// NewMockRepositoryMetrics creates a new mock instance.
func NewMockRepositoryMetrics(ctrl *gomock.Controller) *MockRepositoryMetrics {
	mock := &MockRepositoryMetrics{ctrl: ctrl}
	mock.recorder = &MockRepositoryMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryMetrics) EXPECT() *MockRepositoryMetricsMockRecorder {
	return m.recorder
}

// GetForks mocks base method.
func (m *MockRepositoryMetrics) GetForks() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetForks")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetForks indicates an expected call of GetForks.
func (mr *MockRepositoryMetricsMockRecorder) GetForks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForks", reflect.TypeOf((*MockRepositoryMetrics)(nil).GetForks))
}

// GetHasCICD mocks base method.
func (m *MockRepositoryMetrics) GetHasCICD() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHasCICD")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetHasCICD indicates an expected call of GetHasCICD.
func (mr *MockRepositoryMetricsMockRecorder) GetHasCICD() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHasCICD", reflect.TypeOf((*MockRepositoryMetrics)(nil).GetHasCICD))
}

// GetHasContributing mocks base method.
func (m *MockRepositoryMetrics) GetHasContributing() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHasContributing")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetHasContributing indicates an expected call of GetHasContributing.
func (mr *MockRepositoryMetricsMockRecorder) GetHasContributing() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHasContributing", reflect.TypeOf((*MockRepositoryMetrics)(nil).GetHasContributing))
}

// GetHasLicense mocks base method.
func (m *MockRepositoryMetrics) GetHasLicense() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHasLicense")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetHasLicense indicates an expected call of GetHasLicense.
func (mr *MockRepositoryMetricsMockRecorder) GetHasLicense() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHasLicense", reflect.TypeOf((*MockRepositoryMetrics)(nil).GetHasLicense))
}

// GetIsArchived mocks base method.
func (m *MockRepositoryMetrics) GetIsArchived() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIsArchived")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetIsArchived indicates an expected call of GetIsArchived.
func (mr *MockRepositoryMetricsMockRecorder) GetIsArchived() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIsArchived", reflect.TypeOf((*MockRepositoryMetrics)(nil).GetIsArchived))
}

// GetLastCommitDate mocks base method.
func (m *MockRepositoryMetrics) GetLastCommitDate() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastCommitDate")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetLastCommitDate indicates an expected call of GetLastCommitDate.
func (mr *MockRepositoryMetricsMockRecorder) GetLastCommitDate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastCommitDate", reflect.TypeOf((*MockRepositoryMetrics)(nil).GetLastCommitDate))
}

// GetLastReleaseDate mocks base method.
func (m *MockRepositoryMetrics) GetLastReleaseDate() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastReleaseDate")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetLastReleaseDate indicates an expected call of GetLastReleaseDate.
func (mr *MockRepositoryMetricsMockRecorder) GetLastReleaseDate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastReleaseDate", reflect.TypeOf((*MockRepositoryMetrics)(nil).GetLastReleaseDate))
}

// GetOpenIssues mocks base method.
func (m *MockRepositoryMetrics) GetOpenIssues() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpenIssues")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetOpenIssues indicates an expected call of GetOpenIssues.
func (mr *MockRepositoryMetricsMockRecorder) GetOpenIssues() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenIssues", reflect.TypeOf((*MockRepositoryMetrics)(nil).GetOpenIssues))
}

// GetOpenPRs mocks base method.
func (m *MockRepositoryMetrics) GetOpenPRs() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpenPRs")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetOpenPRs indicates an expected call of GetOpenPRs.
func (mr *MockRepositoryMetricsMockRecorder) GetOpenPRs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenPRs", reflect.TypeOf((*MockRepositoryMetrics)(nil).GetOpenPRs))
}

// GetReleaseCount mocks base method.
func (m *MockRepositoryMetrics) GetReleaseCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReleaseCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetReleaseCount indicates an expected call of GetReleaseCount.
func (mr *MockRepositoryMetricsMockRecorder) GetReleaseCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReleaseCount", reflect.TypeOf((*MockRepositoryMetrics)(nil).GetReleaseCount))
}

// GetStars mocks base method.
func (m *MockRepositoryMetrics) GetStars() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStars")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetStars indicates an expected call of GetStars.
func (mr *MockRepositoryMetricsMockRecorder) GetStars() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStars", reflect.TypeOf((*MockRepositoryMetrics)(nil).GetStars))
}
