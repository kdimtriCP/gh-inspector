//go:build !noswagger
// +build !noswagger

// Package swagger Code generated by swaggo/swag. DO NOT EDIT
package swagger

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "GitHub Inspector Team",
            "url": "https://github.com/kdimtriCP/gh-inspector",
            "email": "support@example.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "get": {
                "description": "Returns information about the API and available endpoints",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "info"
                ],
                "summary": "Get API information",
                "responses": {
                    "200": {
                        "description": "API information",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/score": {
            "post": {
                "description": "Analyzes and scores a list of GitHub repositories based on various metrics",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "analysis"
                ],
                "summary": "Score GitHub repositories",
                "parameters": [
                    {
                        "description": "List of repositories to analyze",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.ScoreRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully scored repositories",
                        "schema": {
                            "$ref": "#/definitions/server.ScoreResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/server.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Returns the health status of the service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "monitoring"
                ],
                "summary": "Health check",
                "responses": {
                    "200": {
                        "description": "Service is healthy",
                        "schema": {
                            "$ref": "#/definitions/server.HealthResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "formatter.Record": {
            "description": "Repository scoring results",
            "type": "object",
            "properties": {
                "archived": {
                    "description": "Archive status",
                    "type": "string",
                    "enum": [
                        "Yes",
                        "No"
                    ],
                    "example": "No"
                },
                "ci_cd": {
                    "description": "CI/CD presence",
                    "type": "string",
                    "enum": [
                        "Yes",
                        "No"
                    ],
                    "example": "Yes"
                },
                "code_of_conduct": {
                    "description": "Code of conduct presence",
                    "type": "string",
                    "enum": [
                        "Yes",
                        "No"
                    ],
                    "example": "Yes"
                },
                "contributing": {
                    "description": "Contributing guide presence",
                    "type": "string",
                    "enum": [
                        "Yes",
                        "No"
                    ],
                    "example": "Yes"
                },
                "description": {
                    "description": "Repository description",
                    "type": "string",
                    "example": "Production-Grade Container Scheduling and Management"
                },
                "forks": {
                    "description": "Number of forks",
                    "type": "integer",
                    "example": 39000
                },
                "language": {
                    "description": "Primary programming language",
                    "type": "string",
                    "example": "Go"
                },
                "last_commit": {
                    "description": "Last commit relative time",
                    "type": "string",
                    "example": "1 days ago"
                },
                "last_release": {
                    "description": "Last release relative time",
                    "type": "string",
                    "example": "7 days ago"
                },
                "license": {
                    "description": "License presence",
                    "type": "string",
                    "enum": [
                        "Yes",
                        "No"
                    ],
                    "example": "Yes"
                },
                "open_issues": {
                    "description": "Number of open issues",
                    "type": "integer",
                    "example": 1500
                },
                "open_prs": {
                    "description": "Number of open pull requests",
                    "type": "integer",
                    "example": 300
                },
                "readme": {
                    "description": "README presence",
                    "type": "string",
                    "enum": [
                        "Yes",
                        "No"
                    ],
                    "example": "Yes"
                },
                "releases": {
                    "description": "Number of releases",
                    "type": "integer",
                    "example": 350
                },
                "repository": {
                    "description": "Repository name in owner/name format",
                    "type": "string",
                    "example": "kubernetes/kubernetes"
                },
                "score": {
                    "description": "Repository score (0-100)",
                    "type": "number",
                    "example": 95.5
                },
                "security": {
                    "description": "Security policy presence",
                    "type": "string",
                    "enum": [
                        "Yes",
                        "No"
                    ],
                    "example": "Yes"
                },
                "stars": {
                    "description": "Number of stars",
                    "type": "integer",
                    "example": 108000
                },
                "watchers": {
                    "description": "Number of watchers",
                    "type": "integer",
                    "example": 3500
                }
            }
        },
        "server.ErrorResponse": {
            "description": "Error response from the API",
            "type": "object",
            "properties": {
                "code": {
                    "description": "Error code",
                    "type": "string",
                    "example": "NO_REPOSITORIES"
                },
                "error": {
                    "description": "Error message",
                    "type": "string",
                    "example": "No repositories provided"
                },
                "timestamp": {
                    "description": "Timestamp of the error",
                    "type": "string",
                    "example": "2025-01-31T10:30:00Z"
                }
            }
        },
        "server.HealthResponse": {
            "description": "Health status of the service",
            "type": "object",
            "properties": {
                "status": {
                    "description": "Health status",
                    "type": "string",
                    "example": "healthy"
                },
                "timestamp": {
                    "description": "Current timestamp",
                    "type": "string",
                    "example": "2025-01-31T10:30:00Z"
                }
            }
        },
        "server.ScoreRequest": {
            "description": "Request body for scoring GitHub repositories",
            "type": "object",
            "properties": {
                "output_format": {
                    "description": "Output format (optional)\n@example json",
                    "type": "string",
                    "example": "json"
                },
                "repositories": {
                    "description": "List of repositories in owner/name format\n@example [\"kubernetes/kubernetes\", \"golang/go\"]",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "kubernetes/kubernetes",
                        "golang/go"
                    ]
                }
            }
        },
        "server.ScoreResponse": {
            "description": "Response containing scored repositories",
            "type": "object",
            "properties": {
                "error_count": {
                    "description": "Number of failed scorings",
                    "type": "integer",
                    "example": 0
                },
                "repositories": {
                    "description": "List of scored repositories",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/formatter.Record"
                    }
                },
                "success_count": {
                    "description": "Number of successfully scored repositories",
                    "type": "integer",
                    "example": 2
                },
                "timestamp": {
                    "description": "Timestamp of the response",
                    "type": "string",
                    "example": "2025-01-31T10:30:00Z"
                },
                "total_count": {
                    "description": "Total number of repositories requested",
                    "type": "integer",
                    "example": 2
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{"http", "https"},
	Title:            "GitHub Inspector API",
	Description:      "REST API for analyzing and scoring GitHub repositories",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
